package vista;

import datos.AlmacenamientoBeneficios;
import datos.AlmacenamientoBeneficiosEstudiantes;
import datos.AlmacenamientoEstudiante;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logica.Beneficios;
import logica.BeneficiosEstudiantes;
import logica.Estudiante;

/**
 *
 * @author monse
 */
public class DlgAsignarBeneficios extends javax.swing.JDialog {

    private ResultSet TablaBD;
    private DefaultTableModel TablaJT;
    private AlmacenamientoBeneficiosEstudiantes almacenamientoBeneficiosEstudiantes;
    private AlmacenamientoEstudiante almacenamientoEstudiantes;
    private AlmacenamientoBeneficios almacenamientoBeneficios;
    private boolean modoEdicion = false;
    private String cedulaOriginal = "";
    private int idBeneficioOriginal = -1;

    /**
     * Creates new form DlgAsignarBeneficios
     */
    public DlgAsignarBeneficios(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        almacenamientoBeneficiosEstudiantes = AlmacenamientoBeneficiosEstudiantes.getInstance();
        almacenamientoEstudiantes = AlmacenamientoEstudiante.getInstance();
        almacenamientoBeneficios = AlmacenamientoBeneficios.getInstance();
        TablaJT = (DefaultTableModel) JtBeneficios.getModel();
        cargarComboBoxes();
        actualizarTabla();
        configurarListenerTabla();
        habilitarBotones(true, false);
    }

    private void cargarComboBoxes() {
        cmbCedula_Estudiante.removeAllItems();
        cmbId_Beneficio.removeAllItems();
        cmbCedula_Estudiante.addItem("Seleccionar...");
        cmbId_Beneficio.addItem("Seleccionar...");

        for (Estudiante est : almacenamientoEstudiantes.obtenerTodos()) {
            cmbCedula_Estudiante.addItem(est.getCedula());
        }
        for (Beneficios ben : almacenamientoBeneficios.obtenerTodos()) {
            cmbId_Beneficio.addItem(ben.getIdBeneficio() + " - " + ben.getNomBeneficio());
        }
    }

    private void actualizarTabla() {
        mostrarEnTabla(almacenamientoBeneficiosEstudiantes.obtenerTodas());
    }

    private void mostrarEnTabla(ArrayList<BeneficiosEstudiantes> lista) {
        TablaJT.setRowCount(0);
        for (BeneficiosEstudiantes be : lista) {
            TablaJT.addRow(new Object[]{
                be.getCedula(),
                be.getIdBeneficio()
            });
        }
    }

    private void limpiarCampos() {
        cmbCedula_Estudiante.setSelectedIndex(0);
        cmbId_Beneficio.setSelectedIndex(0);
        cedulaOriginal = "";
        idBeneficioOriginal = -1;
        JtBeneficios.clearSelection();
        habilitarBotones(true, false);
    }

    private void configurarListenerTabla() {
        JtBeneficios.getSelectionModel().addListSelectionListener(e -> {
            int fila = JtBeneficios.getSelectedRow();
            if (fila != -1 && fila < TablaJT.getRowCount()) {
                try {
                    cedulaOriginal = TablaJT.getValueAt(fila, 0).toString();
                    idBeneficioOriginal = Integer.parseInt(TablaJT.getValueAt(fila, 1).toString());
                    cmbCedula_Estudiante.setSelectedItem(cedulaOriginal);
                    Beneficios ben = almacenamientoBeneficios.buscarPorId(idBeneficioOriginal);
                    if (ben != null) {
                        cmbId_Beneficio.setSelectedItem(idBeneficioOriginal + " - " + ben.getNomBeneficio());
                    }
                    habilitarBotones(false, true);
                } catch (Exception ex) {
                    System.out.println("Error al cargar datos de la fila: " + ex.getMessage());
                    ex.printStackTrace();
                }
            }
        });
    }

    private void habilitarBotones(boolean insertar, boolean actualizarEliminar) {
        btnInsertar.setEnabled(insertar);
        btnActualizar.setEnabled(actualizarEliminar);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        lblBuscar2 = new javax.swing.JLabel();
        btnInsertar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        txtBusqueda = new javax.swing.JTextField();
        lblCarnet2 = new javax.swing.JLabel();
        lblMonto = new javax.swing.JLabel();
        cmbCedula_Estudiante = new javax.swing.JComboBox<>();
        cmbId_Beneficio = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        JtBeneficios = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblBuscar2.setText("Buscar:");

        btnInsertar.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btnInsertar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/insertar.png"))); // NOI18N
        btnInsertar.setText("Insertar");
        btnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });

        btnActualizar.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/editar.png"))); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/eliminar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        txtBusqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBusquedaKeyReleased(evt);
            }
        });

        lblCarnet2.setText("Id_Beneficio:");

        lblMonto.setText("Cedula:");

        cmbCedula_Estudiante.setToolTipText("");

        cmbId_Beneficio.setToolTipText("");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblBuscar2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(btnInsertar)
                .addGap(18, 18, 18)
                .addComponent(btnActualizar)
                .addGap(18, 18, 18)
                .addComponent(btnEliminar)
                .addGap(18, 18, 18))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCarnet2)
                    .addComponent(lblMonto))
                .addGap(29, 29, 29)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cmbId_Beneficio, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCedula_Estudiante, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminar)
                    .addComponent(btnActualizar)
                    .addComponent(btnInsertar)
                    .addComponent(lblBuscar2)
                    .addComponent(txtBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbCedula_Estudiante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMonto))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCarnet2)
                    .addComponent(cmbId_Beneficio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(106, 106, 106))
        );

        JtBeneficios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cedula_Estudiando", "Id_Beneficio"
            }
        ));
        jScrollPane2.setViewportView(JtBeneficios);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane2)))
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarActionPerformed
        try {
            if (cmbCedula_Estudiante.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(this, "Seleccione un estudiante", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (cmbId_Beneficio.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(this, "Seleccione un beneficio", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String cedula = cmbCedula_Estudiante.getSelectedItem().toString();
            String beneficioSeleccionado = cmbId_Beneficio.getSelectedItem().toString();
            int idBeneficio = Integer.parseInt(beneficioSeleccionado.split(" - ")[0]);

            BeneficiosEstudiantes beneficioEstudiante = new BeneficiosEstudiantes(cedula, idBeneficio);

            if (almacenamientoBeneficiosEstudiantes.insertar(beneficioEstudiante)) {
                JOptionPane.showMessageDialog(this, "Beneficio asignado con éxito");
                actualizarTabla();
                limpiarCampos();
            } else {
                JOptionPane.showMessageDialog(this, "El beneficio ya está asignado a este estudiante", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al asignar beneficio: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnInsertarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        try {
            if (cedulaOriginal.isEmpty() || idBeneficioOriginal == -1) {
                JOptionPane.showMessageDialog(this, "Seleccione un registro de la tabla para actualizar", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (cmbCedula_Estudiante.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(this, "Seleccione un estudiante", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (cmbId_Beneficio.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(this, "Seleccione un beneficio", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String nuevaCedula = cmbCedula_Estudiante.getSelectedItem().toString();
            String beneficioSeleccionado = cmbId_Beneficio.getSelectedItem().toString();
            int nuevoIdBeneficio = Integer.parseInt(beneficioSeleccionado.split(" - ")[0]);

            BeneficiosEstudiantes beneficioEstudianteNuevo = new BeneficiosEstudiantes(nuevaCedula, nuevoIdBeneficio);

            if (almacenamientoBeneficiosEstudiantes.modificar(cedulaOriginal, idBeneficioOriginal, beneficioEstudianteNuevo)) {
                JOptionPane.showMessageDialog(this, "Asignación de beneficio actualizada con éxito");
                actualizarTabla();
                limpiarCampos();
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo actualizar la asignación", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "ID de beneficio no es válido", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al actualizar: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        try {
            int fila = JtBeneficios.getSelectedRow();
            if (fila == -1) {
                JOptionPane.showMessageDialog(this, "Seleccione un registro de la tabla para eliminar");
                return;
            }

            String cedula = TablaJT.getValueAt(fila, 0).toString();
            int idBeneficio = Integer.parseInt(TablaJT.getValueAt(fila, 1).toString());

            int confirm = JOptionPane.showConfirmDialog(this,
                    "¿Seguro que desea eliminar la asignación de beneficio?",
                    "Confirmar",
                    JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                if (almacenamientoBeneficiosEstudiantes.eliminar(cedula, idBeneficio)) {
                    JOptionPane.showMessageDialog(this, "Asignación de beneficio eliminada con éxito");
                    actualizarTabla();
                    limpiarCampos();
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo eliminar la asignación", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al eliminar: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void txtBusquedaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBusquedaKeyReleased
        String datoBusqueda = txtBusqueda.getText().trim();

        try {
            TablaJT.setRowCount(0);
            ArrayList<BeneficiosEstudiantes> resultadosBusqueda = new ArrayList<>();
            if (datoBusqueda.isEmpty()) {
                resultadosBusqueda = almacenamientoBeneficiosEstudiantes.obtenerTodas();
            } else {
                for (BeneficiosEstudiantes be : almacenamientoBeneficiosEstudiantes.obtenerTodas()) {
                    if (be.getCedula().toLowerCase().contains(datoBusqueda.toLowerCase())) {
                        resultadosBusqueda.add(be);
                    }
                }
            }
            for (BeneficiosEstudiantes be : resultadosBusqueda) {
                TablaJT.addRow(new Object[]{
                    be.getCedula(),
                    be.getIdBeneficio()
                });
            }

            JtBeneficios.revalidate();
            JtBeneficios.repaint();

        } catch (Exception ex) {
            System.out.println("Error al realizar la búsqueda: " + ex.getMessage());
            ex.printStackTrace();
        }
    }//GEN-LAST:event_txtBusquedaKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DlgAsignarBeneficios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DlgAsignarBeneficios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DlgAsignarBeneficios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DlgAsignarBeneficios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DlgAsignarBeneficios dialog = new DlgAsignarBeneficios(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable JtBeneficios;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnInsertar;
    private javax.swing.JComboBox<String> cmbCedula_Estudiante;
    private javax.swing.JComboBox<String> cmbId_Beneficio;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBuscar2;
    private javax.swing.JLabel lblCarnet2;
    private javax.swing.JLabel lblMonto;
    private javax.swing.JTextField txtBusqueda;
    // End of variables declaration//GEN-END:variables

    private static class tblBeneficiosDisponibles {

        public tblBeneficiosDisponibles() {
        }
    }
}
