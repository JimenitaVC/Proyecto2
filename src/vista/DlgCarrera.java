package vista;

import datos.AlmacenamientoCarreras;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logica.Carreras;

/**
 *
 * @author UTN
 */
public class DlgCarrera extends javax.swing.JDialog {

    private ResultSet TablaBD;
    private DefaultTableModel TablaJT;
    private AlmacenamientoCarreras almacenamientoCarreras;
    private boolean modoEdicion = false;
    private int idCarreraOriginal = -1;

    public DlgCarrera(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        almacenamientoCarreras = AlmacenamientoCarreras.getInstance();
        TablaJT = (DefaultTableModel) JtCarrera.getModel();
        actualizarTabla();
        txtId_carrera.setText(String.valueOf(almacenamientoCarreras.obtenerSiguienteId()));
        configurarListenerTabla();
        habilitarBotones(true, false);
    }

    private void configurarListenerTabla() {
        JtCarrera.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            @Override
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                if (!evt.getValueIsAdjusting()) {
                    int filaSeleccionada = JtCarrera.getSelectedRow();
                    if (filaSeleccionada != -1) {
                        cargarDatosEnCampos(filaSeleccionada);
                        modoEdicion = true;
                        habilitarBotones(false, true);
                    }
                }
            }
        });
    }

    private void cargarDatosEnCampos(int fila) {
        try {
            int idCarrera = (Integer) TablaJT.getValueAt(fila, 0);
            String nombreCarrera = (String) TablaJT.getValueAt(fila, 1);
            String grado = (String) TablaJT.getValueAt(fila, 2);
            txtId_carrera.setText(String.valueOf(idCarrera));
            txtNombre.setText(nombreCarrera);
            for (int i = 0; i < cmbGrados.getItemCount(); i++) {
                if (cmbGrados.getItemAt(i).toString().equals(grado)) {
                    cmbGrados.setSelectedIndex(i);
                    break;
                }
            }
            idCarreraOriginal = idCarrera;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error al cargar datos: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void habilitarBotones(boolean insertar, boolean actualizar) {
        btnInsertar.setEnabled(insertar);
        btnActualizar.setEnabled(actualizar);
        txtId_carrera.setEnabled(false);
    }

    private void limpiarCampos() {
        txtNombre.setText("");
        cmbGrados.setSelectedIndex(-1);
        txtNombre.requestFocus();
        modoEdicion = false;
        idCarreraOriginal = -1;
        txtId_carrera.setText(String.valueOf(almacenamientoCarreras.obtenerSiguienteId()));
        habilitarBotones(true, false);
        JtCarrera.clearSelection();
    }

    private void actualizarTabla() {
        try {
            TablaJT.setRowCount(0);
            ArrayList<Carreras> listaCarreras = almacenamientoCarreras.obtenerTodas();
            for (Carreras carrera : listaCarreras) {
                Object[] fila = new Object[3];
                fila[0] = carrera.getIdCarrera();
                fila[1] = carrera.getNomCarrera();
                fila[2] = carrera.getGrado();
                TablaJT.addRow(fila);
            }
            JtCarrera.revalidate();
            JtCarrera.repaint();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error al actualizar la tabla: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        JtCarrera = new javax.swing.JTable();
        lblRegistro = new javax.swing.JLabel();
        txtCantidadRegis = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        lblBuscar2 = new javax.swing.JLabel();
        btnInsertar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        txtBusqueda = new javax.swing.JTextField();
        lblCarnet2 = new javax.swing.JLabel();
        lblFechaIngreso2 = new javax.swing.JLabel();
        lblFechaEgreso2 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        cmbGrados = new javax.swing.JComboBox<>();
        txtId_carrera = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        JtCarrera.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id_carrera", "Nombre", "Grado"
            }
        ));
        jScrollPane2.setViewportView(JtCarrera);

        lblRegistro.setText("Cantidad de Registro:");

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblBuscar2.setText("Buscar:");

        btnInsertar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/insertar.png"))); // NOI18N
        btnInsertar.setText("Insertar");
        btnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });

        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/editar.png"))); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/eliminar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        txtBusqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBusquedaKeyReleased(evt);
            }
        });

        lblCarnet2.setText("Id_Carrera");

        lblFechaIngreso2.setText("Nombre");

        lblFechaEgreso2.setText("Grado");

        cmbGrados.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Diplomado", "Bachillerato", "Maestria" }));
        cmbGrados.setToolTipText("");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(lblCarnet2)
                                .addGap(18, 18, 18)
                                .addComponent(txtId_carrera, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblFechaIngreso2)
                                    .addComponent(lblFechaEgreso2))
                                .addGap(26, 26, 26)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbGrados, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(btnInsertar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnActualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBuscar2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(txtBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(lblCarnet2)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtId_carrera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFechaIngreso2)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFechaEgreso2)
                    .addComponent(cmbGrados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 128, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInsertar)
                    .addComponent(btnActualizar)
                    .addComponent(btnEliminar)
                    .addComponent(txtBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBuscar2))
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lblRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCantidadRegis, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRegistro)
                    .addComponent(txtCantidadRegis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void btnInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarActionPerformed
        // TODO add your handling code here:
        try {
            if (txtId_carrera.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "El ID de carrera es obligatorio",
                        "Error", JOptionPane.ERROR_MESSAGE);
                txtId_carrera.requestFocus();
                return;
            }
            if (txtNombre.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "El nombre de la carrera es obligatorio",
                        "Error", JOptionPane.ERROR_MESSAGE);
                txtNombre.requestFocus();
                return;
            }
            if (cmbGrados.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar un grado académico",
                        "Error", JOptionPane.ERROR_MESSAGE);
                cmbGrados.requestFocus();
                return;
            }
            int idCarrera;
            try {
                idCarrera = Integer.parseInt(txtId_carrera.getText().trim());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El ID debe ser un número válido",
                        "Error", JOptionPane.ERROR_MESSAGE);
                txtId_carrera.selectAll();
                txtId_carrera.requestFocus();
                return;
            }

            String nombreCarrera = txtNombre.getText().trim();
            String grado = cmbGrados.getSelectedItem().toString();

            Carreras nuevaCarrera = new Carreras(idCarrera, nombreCarrera, grado);

            boolean guardado = almacenamientoCarreras.insertar(nuevaCarrera);

            if (guardado) {
                JOptionPane.showMessageDialog(this, "Carrera guardada exitosamente",
                        "Éxito", JOptionPane.INFORMATION_MESSAGE);

                actualizarTabla();
                limpiarCampos();
                txtId_carrera.setText(String.valueOf(almacenamientoCarreras.obtenerSiguienteId()));

            } else {
                JOptionPane.showMessageDialog(this,
                        "Error: Ya existe una carrera con el ID " + idCarrera,
                        "Error", JOptionPane.ERROR_MESSAGE);
                txtId_carrera.selectAll();
                txtId_carrera.requestFocus();
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error inesperado: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnInsertarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // TODO add your handling code here:
        try {
            if (!modoEdicion || idCarreraOriginal == -1) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar una carrera de la tabla para actualizar",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (txtNombre.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "El nombre de la carrera es obligatorio",
                        "Error", JOptionPane.ERROR_MESSAGE);
                txtNombre.requestFocus();
                return;
            }
            if (cmbGrados.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar un grado académico",
                        "Error", JOptionPane.ERROR_MESSAGE);
                cmbGrados.requestFocus();
                return;
            }

            String nombreCarrera = txtNombre.getText().trim();
            String grado = cmbGrados.getSelectedItem().toString();
            Carreras carreraActualizada = new Carreras(idCarreraOriginal, nombreCarrera, grado);
            boolean actualizado = almacenamientoCarreras.modificar(idCarreraOriginal, carreraActualizada);
            if (actualizado) {
                JOptionPane.showMessageDialog(this, "Carrera actualizada exitosamente",
                        "Éxito", JOptionPane.INFORMATION_MESSAGE);
                actualizarTabla();
                limpiarCampos();
            } else {
                JOptionPane.showMessageDialog(this,
                        "Error: No se pudo actualizar la carrera. Verifique que el ID exista.",
                        "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error inesperado: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        try {
            if (!modoEdicion || idCarreraOriginal == -1) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar una carrera de la tabla para eliminar",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int opcion = JOptionPane.showConfirmDialog(this,
                    "¿Está seguro de que desea eliminar esta carrera?",
                    "Confirmar eliminación",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);

            if (opcion == JOptionPane.YES_OPTION) {
                boolean eliminado = almacenamientoCarreras.eliminar(idCarreraOriginal);

                if (eliminado) {
                    JOptionPane.showMessageDialog(this, "Carrera eliminada exitosamente",
                            "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    actualizarTabla();
                    limpiarCampos();
                } else {
                    JOptionPane.showMessageDialog(this,
                            "Error: No se pudo eliminar la carrera.",
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error inesperado: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void txtBusquedaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBusquedaKeyReleased

        String datoBusqueda = txtBusqueda.getText().trim();

        try {
            TablaJT.setRowCount(0);

            if (datoBusqueda.isEmpty()) {
                ArrayList<Carreras> todasLasCarreras = almacenamientoCarreras.obtenerTodas();
                for (Carreras carrera : todasLasCarreras) {
                    Object[] fila = {
                        carrera.getIdCarrera(),
                        carrera.getNomCarrera(),
                        carrera.getGrado()
                    };
                    TablaJT.addRow(fila);
                }
            } else {
                ArrayList<Carreras> resultadosBusqueda = new ArrayList<>();
                try {
                    int idBusqueda = Integer.parseInt(datoBusqueda);
                    Carreras carreraPorId = almacenamientoCarreras.buscarPorId(idBusqueda);
                    if (carreraPorId != null) {
                        resultadosBusqueda.add(carreraPorId);
                    }
                } catch (NumberFormatException e) {
                }
                ArrayList<Carreras> carrerasPorNombre = almacenamientoCarreras.buscarPorNombre(datoBusqueda);
                for (Carreras carrera : carrerasPorNombre) {
                    if (!resultadosBusqueda.contains(carrera)) {
                        resultadosBusqueda.add(carrera);
                    }
                }
                for (Carreras carrera : resultadosBusqueda) {
                    Object[] fila = {
                        carrera.getIdCarrera(),
                        carrera.getNomCarrera(),
                        carrera.getGrado()
                    };
                    TablaJT.addRow(fila);
                }
            }

            JtCarrera.revalidate();
            JtCarrera.repaint();

        } catch (Exception ex) {
            System.out.println("Error al realizar la búsqueda: " + ex.getMessage());
            ex.printStackTrace();
        }
    }//GEN-LAST:event_txtBusquedaKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DlgCarrera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DlgCarrera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DlgCarrera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DlgCarrera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DlgCarrera dialog = new DlgCarrera(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable JtCarrera;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnInsertar;
    private javax.swing.JComboBox<String> cmbGrados;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBuscar2;
    private javax.swing.JLabel lblCarnet2;
    private javax.swing.JLabel lblFechaEgreso2;
    private javax.swing.JLabel lblFechaIngreso2;
    private javax.swing.JLabel lblRegistro;
    private javax.swing.JTextField txtBusqueda;
    private javax.swing.JTextField txtCantidadRegis;
    private javax.swing.JTextField txtId_carrera;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
